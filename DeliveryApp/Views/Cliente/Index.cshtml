@model IEnumerable<DeliveryApp.Models.Cliente>

@{
    ViewData["Title"] = "Index";
}

<h1>Clientes:</h1>
//Los display son helpers que se encuentran en el html helper, se usan en las vistas. La idea es que nosotros le pasamos cualquier tipo de obj y este se 
// encarga de escribirlo en algun formato que el usuario lo pueda visualizar
<p>
    <a asp-action="Create">Ingresar Cliente ➕</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Dni)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Nombre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Apellido)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Telefono)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Direccion)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Dni)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Nombre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Apellido)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Telefono)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Direccion)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.IdCliente">Editar ✒</a> |
                <a asp-action="Details" asp-route-id="@item.IdCliente">Detalles 📑</a> |
                <a asp-action="Delete" asp-route-id="@item.IdCliente">Eliminar❌</a>
            </td>
        </tr>
}
    </tbody>
</table>
